public class AuditFeedbackController {
	
	private ApexPages.StandardSetController auditCriteriaSet;
    private Map<Id, AuditFeedbackModel> auditCriteriaMap;    

    public void AuditFeedbackController(){}

    //Header Fields that will be calculated
    public String PassFail {get; set;}
    public String CorporatePassFail {get; set;}
    public Decimal Score {get;set;}
    public Integer EPCDiscrepancies {get;set;}
    public Integer PriorityCriteriaMissed {get;set;}
    public Integer CriteriaMissed {get;set;}
    public Integer PriorityCriteriaMissing {get; set;}
    public String AuditorComments {get; set;}
    private Decimal criteriaPerPage {get; set;}
    
    public List<selectOption> QAScores;
    
    //User Type for determining Access
    public String UserType {get;set;}
    
    public List<AuditFeedbackModel> auditFeedbackList {get;set;}
        
    public Install_Audit__c installAudit {get;set;}
    
    InstallAuditService installAuditService;
    public List<selectOption> auditorAccountContacts {get; set;}
    ApexPages.standardController standardController;
    
    public List<SiteCharacteristic> siteCharacteristics {get; set;}
    
    public AuditFeedbackController(ApexPages.standardController sc)
    {
        standardController = sc;
        init();
    }    
    
    private List<SiteCharacteristic> buildSiteCharacteristics(Id installAuditId)
    {
        SiteCharacteristic siteCharacteristic;
        List<SiteCharacteristic> characteristics = new List<SiteCharacteristic>();
                
        List<Site_Characteristic__c> listSites = [select Id, Observed_Azimuth__c, Observed_Average_Annual_Shading__c, Observed_Tilt__c, EPC_Tilt__c, EPC_Azimuth__c, Panel_Manufacturer__c,
                                                    Inverter_Manufacturer__c, Inverter_Count__c, Panel_Count__c, EPC_Average_Annual_Shading__c
                                                    from Site_Characteristic__c where Install_Audit__c = :installAuditId order by Id];
        
        for(Site_Characteristic__c site:listSites)
        {
            siteCharacteristic = new SiteCharacteristic(site);    
            characteristics.add(siteCharacteristic);
        }
        return characteristics ;
    }
     
    public void init(){
        installAuditService = new InstallAuditService();
        siteCharacteristics  = new List<SiteCharacteristic>();
        UserType = installAuditService.getUserTypeFromUserProfile();
        string installAuditId = ApexPages.currentPage().getParameters().get('Install_Audit__c');
        auditCriteriaMap = new Map<Id, AuditFeedbackModel>();
        
        installAudit = installAuditService.getInstallAudit(installAuditId);
        
        siteCharacteristics = buildSiteCharacteristics(installAuditId);
                
        List<Audit_Feedback__c> listAuditFeedbackObj = installAuditService.getInstallAuditFeedback(installAuditId);
        List<Audit_Criteria__c> listAuditCriteria ;
        String autoGeneratedSunrunComments = '';
        criteriaPerPage = [select Name, Value__c from Sun_Run_Audit_List_Settings__c where Name = 'Pagination Rows' limit 1].Value__c;
              
        if(listAuditFeedbackObj.size() == 0)
        {
            listAuditCriteria = installAuditService.getActiveAuditCriteria();
            for(Audit_Criteria__c auditCriteria : listAuditCriteria )
            {
                auditCriteriaMap.put(auditCriteria.Id, new AuditFeedbackModel(auditCriteria, installAuditId));     
            }     
        }
        else
        {
            listAuditCriteria = new List<Audit_Criteria__c>();
            for(Audit_Feedback__c auditFeedback : listAuditFeedbackObj)
            {
                if(auditFeedback.Comments__c != null && auditFeedback.Comments__c != '' )
                    autoGeneratedSunrunComments = autoGeneratedSunrunComments + '\n' + auditFeedback.Audit_Criteria__r.Criteria_Id__c + ': ' + auditFeedback.Comments__c ;
                listAuditCriteria.add(auditFeedback.Audit_Criteria__r);
                auditCriteriaMap.put(auditFeedback.Audit_Criteria__r.Id, new AuditFeedbackModel(auditFeedback, siteCharacteristics));
            //    calculateHeaderScores(auditCriteriaMap);
            }          
        }    
        auditFeedbackList= GetPaginatedAuditFeedbackList(listAuditCriteria, auditCriteriaMap);
        AuditorComments = autoGeneratedSunrunComments;
    }

    private List<AuditFeedbackModel> GetPaginatedAuditFeedbackList(List<Audit_Criteria__c> criteria, Map<Id, AuditFeedbackModel> criteriaMap)
    {
        this.auditCriteriaSet = PaginationHelper.getStdSetController(criteria, Integer.valueOf(criteriaPerPage));
        List<AuditFeedbackModel> models = new List<AuditFeedbackModel>();
        List<Audit_Criteria__c> listCriteria = auditCriteriaSet.getRecords();
        for (Audit_Criteria__c crit: listCriteria ) {
            if (criteriaMap.containsKey(crit.Id)) 
                models.add(criteriaMap.get(crit.Id));
            }
        return models;    
    }

    public static List<AuditFeedbackModel> getCriteriaListFromCompleteList(List<Audit_Criteria__c> crit, Map<Id, AuditFeedbackModel> critMap) {
        List<AuditFeedbackModel> listF = new List<AuditFeedbackModel>();
        for (Audit_Criteria__c c : crit) {
        if (critMap.containsKey(c.Id)) 
            listF.add(critMap.get(c.Id));
         }
         return listF ;
    }   

    public PageReference nextPhotosPage() { 
        auditFeedbackList= getCriteriaListFromCompleteList(PaginationHelper.getNextSetOfRecords(auditCriteriaSet), auditCriteriaMap);        
        //System.Debug('Photo Count: ' + attPhotos.size());                    
        return null;
    }
    

    public PageReference previousCriteriaPage() { 
        auditFeedbackList= getCriteriaListFromCompleteList(PaginationHelper.getPreviousSetOfRecords(auditCriteriaSet), auditCriteriaMap);        
        //System.Debug('Photo Count: ' + attPhotos.size());                    
        return null;
    }

  // get page number that is being displayed in results device table.
    public Integer criteriaPageNumber {
        get {
            if(auditCriteriaSet != null)
                return auditCriteriaSet.getPageNumber();
            else
                return 0;
        } 
        set;
    }
    
    // get the total pages that were returned for photos.
    public Integer criteriaTotalPageNumber {
        get {
            if(auditCriteriaSet != null)
                return PaginationHelper.getTotalNumberOfPages(auditCriteriaSet);
            else
                return 0;
        } 
        set;
    }    


    public void SaveAudit()
    {
        List<Audit_Feedback__c> auditFeedbackObjects = new List<Audit_Feedback__c>();
        List<Site_Characteristic__c> siteCharObjects = new List<Site_Characteristic__c>();
        for(SiteCharacteristic s: siteCharacteristics)
        {
            siteCharObjects.add(s.SiteCharacteristic);
        }
        if(siteCharObjects.size() > 0)
        {
           // try{
                update siteCharObjects;
            //}
            //catch(DMLException e)
            //{
            //}
        }
           
        //CalculateAutoCriteria1();           
           
        for(AuditFeedbackModel afm : auditCriteriaMap.values())
        {
            auditFeedbackObjects.add(afm.af);
        }  
        if (auditFeedbackObjects.size() > 0)
        {
            installAuditService.SaveAuditFeedback(auditFeedbackObjects);
        }    
        AuditScoreModel scoreModel = calculateScores(installAudit.Id);
        installAudit.Score__c = scoreModel.Score;
        installAudit.Partner_Metric__c = scoreModel.PartnerMetric;
        installAudit.Corporate_Metric__c = scoreModel.CorporateMetric;
        installAudit.EPC_Discrepancies__c = scoreModel.EPCDiscrepancies;
        installAudit.Priority_Criteria_Missed__c = scoreModel.PriorityCriteriaMissed; 
        installAudit.Criteria_Missing__c = scoreModel.CriteriaMissed;
        installAudit.Priority_Criteria_Missing__c = scoreModel.PriorityCriteriaMissing;
        installAuditService.SaveInstallAudit(installAudit);
		
		String autoGeneratedSunrunComments = '';
		List<Audit_Feedback__c> listAuditFeedbackObj = installAuditService.getInstallAuditFeedback(installAudit.Id);
		for(Audit_Feedback__c auditFeedback : listAuditFeedbackObj)
		{
			if(auditFeedback.Comments__c != null && auditFeedback.Comments__c != '' )
				autoGeneratedSunrunComments = autoGeneratedSunrunComments + '\n' + auditFeedback.Audit_Criteria__r.Criteria_Id__c + ': ' + auditFeedback.Comments__c ;
		} 
        //calculateHeaderScores(auditCriteriaMap);
		AuditorComments = autoGeneratedSunrunComments;
        
    }
    
    private AuditScoreModel calculateScores(Id installAuditId)
    {
        AuditScoreModel scoreModel = new AuditScoreModel();
    
        Install_Audit__c scoreAudit = [select Id, Substantial_Fails__c, Total_Points_Accrued__c, Total_Points_Possible__c 
                                       from Install_Audit__c where Id = :installAuditId];
        
        if(scoreAudit.Total_Points_Possible__c != 0)                               
            scoreModel.Score = (scoreAudit.Total_Points_Accrued__c / scoreAudit.Total_Points_Possible__c) * 100;
        else
            scoreModel.Score = 0;
                                                   
        scoreModel.EPCDiscrepancies = database.countQuery('select count() from Audit_Feedback__c where EPC_Compliance_Criteria__c = true and (QA_Score__c = \'Fail\' or QA_Score__c = \'Substantial Fail\') and Install_Audit__c = \'' + installAuditId + '\'');       
        scoreModel.PriorityCriteriaMissed = database.countQuery('select count() from Audit_Feedback__c where Priority_Criteria__c = true and (QA_Score__c = \'Fail\' or QA_Score__c = \'Substantial Fail\') and Install_Audit__c = \'' + installAuditId + '\'');
        scoreModel.CriteriaMissed = database.countQuery('select count() from Audit_Feedback__c where QA_Score__c = \'Missing\' and Install_Audit__c = \'' + installAuditId + '\'');
        scoreModel.PriorityCriteriaMissing = database.countQuery('select count() from Audit_Feedback__c where Priority_Criteria__c = true and QA_Score__c = \'Missing\' and Install_Audit__c = \'' + installAuditId + '\'');
        
        if(scoreModel.Score > 85 && scoreAudit.SubStantial_Fails__c == 0)
            scoreModel.CorporateMetric = 'Pass';
        else
            scoreModel.CorporateMetric = 'Fail';  
                    
        if(scoreModel.Score > 85 && scoreModel.PriorityCriteriaMissed == 0)
            scoreModel.PartnerMetric = 'Pass';
        else
            scoreModel.PartnerMetric = 'Fail';                                                      
                                                                    
        return scoreModel;             
    }

    public class AuditScoreModel
    {
        public Decimal Score {get; set;}
        public String PartnerMetric {get; set;}
        public String CorporateMetric {get; set;}
        public Integer PriorityCriteriaMissed {get; set;}
        public Integer CriteriaMissed {get; set;}
        public Integer PriorityCriteriaMissing {get; set;}
        public Integer EPCDiscrepancies {get; set;} 
        
    }

    public class AuditFeedbackModel{
        public Audit_Feedback__c af {get; set;}
        public Audit_Criteria__c ac {get; set;} 
        
        public AuditFeedbackModel(Audit_Feedback__c aFeed, List<SiteCharacteristic> characteristics){
            this.af = aFeed;
            this.ac = aFeed.Audit_Criteria__r; 
            
            if(aFeed.Audit_Criteria__r.Auto_Calculated__c  == true  && aFeed.Audit_Criteria__r.Criteria_Id__c == '01-02'){
                string result = autoCalculateQAScoreForTiltAzimuth(characteristics);
                this.af.QA_Score__c = result;
            }
            
            if(aFeed.Audit_Criteria__r.Auto_Calculated__c  == true  && aFeed.Audit_Criteria__r.Criteria_Id__c == '01-04'){
                string result = autoCalculateQAScoreForAnnualShading(characteristics);
                this.af.QA_Score__c = result;
            }          
        }
        
        public AuditFeedbackModel(Audit_Criteria__c aCriteria, string installAuditId){
            this.ac = aCriteria;
            this.af = new Audit_Feedback__c ();
            this.af.Install_Audit__c = installAuditId;
            this.af.Audit_Criteria__C = aCriteria.Id;
        }
        
        public String autoCalculateQAScoreForTiltAzimuth(List<SiteCharacteristic> siteChars)
        {          
            for(SiteCharacteristic s : siteChars)
            {
                if((s.SiteCharacteristic.Observed_Tilt__c == null) || (s.SiteCharacteristic.Observed_Azimuth__c == null) || 
                ((s.SiteCharacteristic.EPC_Tilt__c - s.SiteCharacteristic.Observed_Tilt__c) > 10) || ((s.SiteCharacteristic.EPC_Tilt__c - s.SiteCharacteristic.Observed_Tilt__c) < -10) ||
                ((s.SiteCharacteristic.EPC_Azimuth__c - s.SiteCharacteristic.Observed_Azimuth__c) > 10) || ((s.SiteCharacteristic.EPC_Azimuth__c - s.SiteCharacteristic.Observed_Azimuth__c) < -10) )
                    return 'Fail';          
            }                
            return 'Pass';
        }
               
        public String autoCalculateQAScoreForAnnualShading(List<SiteCharacteristic> siteChars)
        {
                        
            for(SiteCharacteristic s:siteChars )
            {
                if((s.SiteCharacteristic.Observed_Average_Annual_Shading__c == null) || ((s.SiteCharacteristic.EPC_Average_Annual_Shading__c - s.SiteCharacteristic.Observed_Average_Annual_Shading__c) < -10) || ((s.SiteCharacteristic.EPC_Average_Annual_Shading__c - s.SiteCharacteristic.Observed_Average_Annual_Shading__c) > 5))
                    return 'Fail';
            }
            return 'Pass';
         }
                
        public Boolean getIsEditable()
        {
            if(af.Install_Audit__r.Status__c == 'Rejected' || af.Install_Audit__r.Status__c == 'Assigned')
               return true;
            else
               return false;        
        }       
    }

    public boolean getIsPartnerUser(){
        if(UserType == 'Partner')
            return true;
        return false;
    }

    public boolean getIsPartner(){
        if(UserType == 'Partner')
            return true;
        return false;
    }

    public boolean getIsAuditor(){
        if(UserType == 'Auditor')
            return true;
        return false;
    }
    
    public boolean getIsSunrun(){
        if(UserType == 'Sunrun')
            return true;
        return false;
    }    

    public boolean getIsAdmin(){
        if(UserType == 'Admin')
            return true;
        return false;
    }

    public PageReference RejectAudit()
    {
        installAudit.Status__c = 'Rejected';
        SaveAudit();
        //ReturnToInstallAudit();
        return new PageReference('/apex/InstallAudit?id=' + this.installAudit.Id);
    }

    public PageReference ApproveAudit()
    {
        installAudit.Status__c = 'SR Approved';
        SaveAudit();
        //ReturnToInstallAudit();
        return new PageReference('/apex/InstallAudit?id=' + this.installAudit.Id);
    }
    
    private String stringListToSting(List<String> stringValues)
    {
        String retval = '';
        for(String stringValue:stringValues)
        {
            if(retval == '')
                retval += stringValue;
            else
                retval += ', '+ stringValue;
        }
        return retval;
    }
    
    private String validateSiteCharacteristics()
    {
        for(SiteCharacteristic s : siteCharacteristics)
        {
            if((s.SiteCharacteristic.Observed_Azimuth__c == null || s.SiteCharacteristic.Observed_Average_Annual_Shading__c == null || s.SiteCharacteristic.Observed_Tilt__c == null) && installAudit.Install_Audit_Type__c == 'Onsite')
                return 'Please enter all Observed Site Characteristics for this onsite Audit';
        }
        return '';
    }
    
    private String validateUnansweredCriteria()
    {   
        List<String> criteriaIds = new List<String>(); 
        for(AuditFeedbackModel model: auditCriteriaMap.values())
        {
            if(model.af.QA_Score__c == null || model.af.QA_Score__c == '')
                criteriaIds.add(model.ac.Criteria_Id__c);
        }
        criteriaIds.sort();
        return stringListToSting(criteriaIds);
    }
    
    private String validateFailedCriteria()
    {
        List<String> criteriaIds = new List<String>(); 
        for(AuditFeedbackModel model: auditCriteriaMap.values())
        {
            if((model.af.QA_Score__c == 'Fail' || model.af.QA_Score__c == 'Substantial Fail') && model.af.Comments__c.trim() == '')
                criteriaIds.add(model.ac.Criteria_Id__c);
        }
        criteriaIds.sort();
        return stringListToSting(criteriaIds);
    }   
           
    public PageReference SubmitAudit()
    {
        String failedCriteriaValidation = validateFailedCriteria();
        String unansweredCriteriaValidation = validateUnansweredCriteria();
        String siteCharValidation = validateSiteCharacteristics();
        
        if(failedCriteriaValidation != '')
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Comments need to be entered for the following Failed Criteria: ' + failedCriteriaValidation));
        if(unansweredCriteriaValidation != '')
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'QA Scores need to be enetered for the following Criteria: ' + unansweredCriteriaValidation ));
        if(siteCharValidation != '')
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, siteCharValidation ));
            
        
        if(failedCriteriaValidation != '' || unansweredCriteriaValidation != '' || siteCharValidation != '' )
            return null;
        installAudit.Status__c = 'Submitted';
        SaveAudit();
        return new PageReference('/apex/InstallAudit?id=' + this.installAudit.Id);
    }
    
    public PageReference CancelAuditFeedbackEdits(){
        PageReference pr =  new PageReference('/apex/InstallAudit?id=' + this.installAudit.Id);
        return pr;    
    }
    
    public PageReference SaveAuditFeedback(){
        SaveAudit();
        if(getIsSunrun()){
           PageReference pr =  new PageReference('/apex/InstallAudit?id=' + this.installAudit.Id); 
           return pr;
        }
        return null;      
    }
    
    public PageReference ReturnToInstallAudit()
    {
        PageReference pr =  new PageReference('/apex/InstallAudit?id=' + this.installAudit.Id);
        return pr;  
    }
                
    public PageReference CalculateAutoCriteria1()
    {
        for(AuditFeedbackModel model: auditCriteriaMap.values())
        {
             if(model.ac.Auto_Calculated__c  && model.ac.Criteria_Id__c == '01-02')
                model.af.QA_Score__c = model.autoCalculateQAScoreForTiltAzimuth(siteCharacteristics);
             if(model.ac.Auto_Calculated__c  && model.ac.Criteria_Id__c == '01-04')
                model.af.QA_Score__c =  model.autoCalculateQAScoreForAnnualShading(siteCharacteristics);
        }
        return null;
    }

}