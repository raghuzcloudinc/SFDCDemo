<project name="Salesforce Development Ant tasks" default="deploy_run_tests" basedir="." xmlns:sf="antlib:com.salesforce">

  <taskdef uri="antlib:com.salesforce"
       resource="com/salesforce/antlib.xml"
       classpath="./ant-salesforce.jar"/>

  <property file="build.properties"/>
  <property name="devmajUser"  value="${env.DEVMAJ_USER}"/>
  <property name="devmajUserPwd"  value="${env.DEVMAJ_PASSWORD}${env.DEVMAJ_TOKEN}"/>
  <property name="devmajUrl"  value="${env.DEVMAJ_URL}"/>  
  <property environment="env"/>
  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
    <classpath path="./xmltask.jar" />
  </taskdef>
   	   
  <target name="deploy_run_tests">
    <mkdir dir="../runtest" /> 
    <copy file="package.xml" todir="../src/" overwrite="true" failonerror="true"/>      	   		    
    <sf:deploy username="${env.DEVMAJ_USER}" password="${env.DEVMAJ_PASSWORD}${env.DEVMAJ_TOKEN}" serverurl="${env.DEVMAJ_URL}" deployRoot="../src" runAllTests="true" maxPoll="10000"/>
  </target>

  <target name="deploy_dont_run_tests">
    <antcall target="ExecutePreDeployApexSandbox"/>
    <copy file="package.xml" todir="../src/" overwrite="true" failonerror="true"/>
    <sf:deploy username="${env.SFUSER}" password="${env.SFPASS}${env.SFTOKEN}" serverurl="${env.SF_SANDBOXURL}" deployRoot="../src" runAllTests="false" maxPoll="10000"/>
  </target>
  <target name="deploy">
 <mkdir dir="../runtest" /> 
 <copy file="package.xml" todir="../src/" overwrite="true" failonerror="true"/> 
    <sfQuickDeploy checkOnly="true" username="${env.DEVMAJ_USER}" password="${env.DEVMAJ_PASSWORD}${env.DEVMAJ_TOKEN}" server="${env.DEVMAJ_URL}" dir="../src">
        <fileset dir="../src/classes">
            <include name="**/*Test*.cls"/>
        </fileset>
    </sfQuickDeploy>
</target>
  <scriptdef name="sfQuickDeploy" language="javascript">
  <attribute name="checkonly"/>
      <attribute name="username"/>
      <attribute name="password"/>
      <attribute name="server"/>
     <attribute name="dir"/>
    <attribute name="trace"/>
    <element name="fileset" type="fileset"/>
  <![CDATA[
    var deployTask = project.createTask('antlib:com.salesforce:deploy');
    deployTask.setUsername(attributes.get("username"));
    deployTask.setPassword(attributes.get("password"));
    deployTask.setServerURL(attributes.get("server"));
    deployTask.setDeployRoot(attributes.get("dir"));
    deployTask.setCheckonly(attributes.get("checkonly") == 'true');
    deployTask.setMaxPoll("300");
    var tests = elements.get("fileset");
   self.log('tests'+tests);
    
  var filesets = elements.get("fileset");
        var filesetsIterator = filesets.iterator();
        var projectClasses = [];
        while(filesetsIterator.hasNext()){
            var fs = filesetsIterator.next();
            var iter = fs.iterator();
            while(iter.hasNext()){
                var resource = iter.next();
                var clazz = resource.getName().replace(".cls","");
                self.log("CLASS: " + clazz);
                projectClasses.push(clazz);
            }
        }
               
        var testsElement = deployTask.getClass().getClassLoader().loadClass("com.salesforce.ant.CompileAndTest$RunTestsElement").newInstance();
        deployTask.addRunTest(testsElement);

        var classClazz = deployTask.getClass().getClassLoader().loadClass("com.salesforce.ant.CompileAndTest$CodeNameElement");
        for(i in projectClasses){
            var clazz = classClazz.newInstance();
            clazz.addText(projectClasses[i]);
            testsElement.addClass(clazz);
        }

    deployTask.perform();
  ]]>
  </scriptdef>
  <target name="test">
    <sfCompileAndTestUnmanaged checkOnly="true" username="${env.DEVMAJ_USER}" password="${env.DEVMAJ_PASSWORD}${env.DEVMAJ_TOKEN}" server="${env.DEVMAJ_URL}">
        <fileset dir="../src/classes">
            <include name="**/*Test*.cls"/>
        </fileset>
    </sfCompileAndTestUnmanaged>
</target>

<scriptdef name="sfCompileAndTestUnmanaged" language="javascript">
    <attribute name="checkonly"/>
    <attribute name="username"/>
    <attribute name="password"/>
    <attribute name="server"/>
    <attribute name="trace"/>
    <element name="fileset" type="fileset"/>

    <![CDATA[
        var filesets = elements.get("fileset");
        var filesetsIterator = filesets.iterator();
        var projectClasses = [];
        while(filesetsIterator.hasNext()){
            var fs = filesetsIterator.next();
            var iter = fs.iterator();
            while(iter.hasNext()){
                var resource = iter.next();
                var clazz = resource.getName().replace(".cls","");
                self.log("CLASS: " + clazz);
                projectClasses.push(clazz);
            }
        }

        var task = project.createTask("antlib:com.salesforce:compileAndTest");
        task.setCheckonly(attributes.get("checkonly") == 'true');
        task.setUsername(attributes.get("username"));
        task.setPassword(attributes.get("password"));
        task.setServer(attributes.get("server"));
        task.setTrace(attributes.get("trace") == 'true');

        //I tried 'importPackage' and conventional instantiation but couldn't get the inner class to instantiate; this works though
        var testsElement = task.getClass().getClassLoader().loadClass("com.salesforce.ant.CompileAndTest$RunTestsElement").newInstance();
        task.addRunTests(testsElement);

        var classClazz = task.getClass().getClassLoader().loadClass("com.salesforce.ant.CompileAndTest$CodeNameElement");
        for(i in projectClasses){
            var clazz = classClazz.newInstance();
            clazz.addText(projectClasses[i]);
            testsElement.addClass(clazz);
        }

        task.execute();
     ]]>
</scriptdef>

</project>
